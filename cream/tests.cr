(foldl and #t (list 
      (eq? 22 
            (let ((u 1) (a (+ 1 2))) 
                  (let ((y 3) (b 4)) 
                        (let ((z 5) (c 6)) 
                              (+ u y z a b c)))))
      (eq? 22 
            (let ((x 1) (a (+ 1 1 1))) 
                  (let ((y 3) (b 4)) 
                        (let ((z 5) (c 6)) 
                              (if (= 22 (+ x y z a b c)) 
                                    22 
                                    23)))))
      (= 21 21 21)
      (< 1 2)
      (null? null)
      (not (null? 1))
      (= 1 (car '(1 2 3)))
      (= 2 (cadr '(1 2 3)))
      (empty? '())
      (= 9 (square 3))
      (even? 2)
      (odd? 3)
      (= 1 (car (cons 1 2)))
      (= 2 (cadr (cons 1 2)))
      (number? 3)
      (= 6 
            ((foldl sum 0) '(1 2 3)))
      (= 7 
            ((foldr sum) 1 '(1 2 3)))
      (= 4 ((freeze 4)))
      (let ((x 4)) 
            (let ((y 3)) 
                  (> x y)))
      (cond ((eq? 'else 'hello) #f) 
            ((eq? 2 (+ 2 3)) #f) 
            (else #t))
      (eq? 'hello 'hello)
      (= 2 (/ 4 2))
      (eq? 3 (- 6 3))
      ((lambda (x) 
            (eq? x 4)) 
      4)
      (or #t #f)
      (not (or #f #f))
      (and #t #t)
      (eq? 3 
            (((compose inc) inc) 1)))
)